
:::{.callout-tip}
## Pourquoi est-ce qu'on est ici?  
:::

```{r, echo = FALSE}




cerulean_blue <- "#2fa4e7"
cerulean_gray <- "#495057"
dark_text <- monochromeR::generate_palette(cerulean_gray, "go_both_ways", n_colours =7 )[5]
mid_text <- cerulean_gray
light_text <- monochromeR::generate_palette(cerulean_gray, "go_both_ways", n_colours =7 )[3]

library(ggplot2)
theme_nhsr_demo <- function(base_size = 12, 
                            dark_text = "#1A242F",
                            mid_text = NULL,
                            light_text = NULL) {
  
  if(is.null(mid_text)){ mid_text <- monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[2]}
  if(is.null(light_text)){light_text <- monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[3]}
  
  theme_minimal(base_size = base_size) +
    theme(text = element_text(colour = mid_text, family = "BrandonText", lineheight = 1.1),
          plot.title = element_text(colour = dark_text, family = "EnriquetaSB", size = rel(1.6), margin = margin(12, 0, 8, 0)),
          plot.subtitle = element_text(size = rel(1.1), margin = margin(4, 0, 0, 0)),
          axis.title.x = element_text(size = rel(1),margin = margin(8, 0, 0, 0)),
          axis.title.y = element_text(size = rel(1), margin = margin(0, 4, 0, 0)),
          axis.text.x = element_text(colour = light_text, size = rel(0.8)),
          axis.text.y = element_text(colour = light_text, size = rel(0.8)),
          legend.position = "top",
          legend.justification = 1,
          panel.grid = element_line(colour = "#F3F4F5"),
          plot.caption = element_text(size = rel(0.8), margin = margin(8, 0, 0, 0)),
          plot.margin = margin(0.25, 0.25, 0.25, 0.25,"cm"))
}




#install.packages("ggokabeito")
library(ggokabeito)
ggplot2::theme_set(theme_nhsr_demo(base_size = 11,dark_text =  dark_text, mid_text = mid_text, light_text = light_text)) 
options(ggplot2.discrete.fill  = function() scale_fill_viridis_d() )
options(ggplot2.continuous.fill  = function() scale_fill_okabe_ito)
options(ggplot2.discrete.colour = function() scale_color_okabe_ito())
options(ggplot2.continuous.colour = function() scale_color_viridis_c())
ggplot2::update_geom_defaults("point", ggplot2::aes(color = cerulean_gray))
ggplot2::update_geom_defaults("line", ggplot2::aes(color = cerulean_gray))
ggplot2::update_geom_defaults("rect", ggplot2::aes(color = cerulean_gray, fill = cerulean_gray))
options(scipen=999)

library(ggplot2)
library(dplyr)
library(palmerpenguins)
library(leaflet)





```



First,  I cross reference @fig-charts for fun.  


## nicer code chunks!!   
pris des idées en regardant le code de ce document 
https://quarto.org/docs/extensions/filters.html

puis lesvrais infos sont ici (Sections appearance et filenace)
https://quarto.org/docs/output-formats/html-code.html#appearance
https://quarto.org/docs/output-formats/html-code.html#code-filename


not run: fenced R code block for sharing code using {{}}:  
```{{r}}
1 + 1
```

not run:  echo R code + eval = false, ça ne montre par les backticks avant et après.  
```{r}
#| echo: true
#| eval: false
1 +1 
```

ici je mets 4 backtics pour mettre plusieurs code chunks back to back:  
````
---
title: "My document"
---

Some markdown content.

```{{python}}

1 + 1
```

Some additional markdown content.
````
(fin du 4 backtics  )
not run:  using the filename option in code chunks allows me to give a title   
```{r, filename = "science.R", eval = FALSE, echo = TRUE}
1+1
```


```{.bash filename=".bash"}      
quarto create project <type> <name>
```

```{r}
#| layout-ncol: 2
#| label: fig-charts
#| fig-cap: "mes charts"
#| fig-subcap: 
#|   - "okabe-ito color"
#|   - "default geom color"  


penguins %>% 
  ggplot(aes(x=body_mass_g, y = flipper_length_mm, color = species)) +
  geom_point() + 
  labs(
    title = "This plot uses the okabe-ito scale for color",
    subtitle = "Subtitle",
    caption = "caption"
  )

penguins %>% 
  ggplot(aes(x=body_mass_g, y = flipper_length_mm)) +
  geom_point() + 
  labs(title = "This plot uses the default color for geom_point",
       subtitle = "Subtitle",
       caption = "caption")

```


# toutes les largeurs   
(source: https://quarto.org/docs/authoring/article-layout.html#page-column)
on peut insérer du stock avec le paramètre `#| column : xxx` ou bien avec les trucs funky de quarto:

``` markdown
:::{.column-page}
![](images/elephant.jpg)
:::
```

For computational output, you can specify the page column in your code cell options. For example:
```{r}
#| column: page
#| echo: fenced

knitr::kable(
  mtcars[1:6, 1:10]
)
```

The following code displays a Leaflet map across the whole page using the column: screen 

```{r}
#| column: screen
#| echo: fenced


leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

# toutes les largeurs possibles :   

:::{.column-body-outset}
Outset content...  
:::

:::{.column-body-page}
page content...  
:::

:::{.column-body-page-inset}
page-inset content...  
:::

:::{.column-body-screen-inset}
screen-inset content...  
:::


:::{.column-body-screen}
screen content...  
:::

# margins   

(source: https://quarto.org/docs/authoring/article-layout.html#margin-content)

## margins figures   

```{r}
#| label: fig-mtcars
#| fig-cap: "MPG vs horsepower, colored by transmission."
#| column: margin

library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

## margins tables

```{r}
#| column: margin

knitr::kable(
  mtcars[1:6, 1:3]
)
``` 

## table with figure in the output    
```{r}
#| fig-column: margin

mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)

knitr::kable(
  mtcars[1:6, 1:6]
)

library(ggplot2)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

