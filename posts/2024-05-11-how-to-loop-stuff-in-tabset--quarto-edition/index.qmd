---
title: "How to loop stuff in tabset - quarto edition"
description: ish
author: Simon Coulombe  
date: 2024-05-11
categories: []
lang: fr
---


:::{.callout-tip}
## Pourquoi est-ce qu'on est ici?    

À toutes les fois que je veux faire un rapport je me retrouve avec des tabsets que je dois créer automatiquement.  
La façon d'intégrer les outputs dépend de leur type  (ggpot2, plotly, leaflet, kable, gt, datatable) et me rend fou.  J'essaie de centraliser ça ici.  
:::

```{r libraries, echo = FALSE}
library(ggplot2)
library(dplyr)
library(palmerpenguins)
data(penguins)
library(leaflet)
library(gt)
library(plotly)
library(htmltools)
library(htmlwidgets)
library(DT)
library(mapview)
data(breweries)
library(dplyr)
```


## kable    

kable needs to be wrapped inside print().

::: {.panel-tabset}
```{r kable}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  cat(  glue::glue("### kable {i}   \n\n"))
  cat("\n \n")
  
  print(
    penguins %>%
      filter(island == i) %>%
      head(5) %>%
      knitr::kable()
  )
  cat(' \n \n')
}
```
:::


## gt     

gt needs to be wrapped inside print(tagList()).

::: {.panel-tabset}
```{r gt }
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  cat(  glue::glue("### gt {i}   \n\n"))
  cat("\n \n")
  
  print(
    tagList(
      penguins %>%
        filter(island == i) %>%
        head(5) %>%
        gt::gt()
    )
  )
  cat(' \n \n')
}
```
:::


## datatable   

datatable needs to be wrapped inside print(tagList()) AND having initialized the datatable library before (really!).  
See the answer by Stefan here:   https://stackoverflow.com/questions/74707808/programatically-generate-tabset-panels-of-datatables-in-quarto

```{r datatableinit, include=FALSE, echo = TRUE}
# Init Step to make sure that the dependencies are loaded
htmltools::tagList(datatable(mtcars %>% head(0)))
```

::: {.panel-tabset}
```{r datatable}
#| results: asis
for(i  in levels(penguins$island)) {
  cat(  glue::glue("\n### table {i}  \n\n"))
  print(htmltools::tagList(datatable(penguins %>% filter(island==i))))
}
```
:::



## ggplot    
gplot needs to be wrapped inside print().

::: {.panel-tabset}
```{r ggplot}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  cat(  glue::glue("### ggplot {i}   \n\n"))
  cat("\n \n")
  
  print(
    penguins %>%
      filter(island == i) %>%
      ggplot(aes(x=bill_length_mm,  y= bill_depth_mm, color = species)) +
      geom_point() + 
      labs(title = i)
  )
  cat(' \n \n')
}
```
:::



## plotly    

plotly needs to be wrapped inside print(tagList()) AND be initialized by running plot_ly() before hand, similar to datatable:  

```{r plotlyinit, include = FALSE, echo= TRUE}
htmltools::tagList(plot_ly()) #  initialize plot_ly because fuck you
```


::: {.panel-tabset}
```{r plotly}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  cat(  glue::glue("### plotly {i}   \n\n"))
  cat("\n \n")
  my_plot <- penguins %>%
    filter(island == i) %>%
    ggplot(aes(x=bill_length_mm,  y= bill_depth_mm, color = species)) +
    geom_point() + 
    labs(title = i)
  print(
    tagList(
      ggplotly(my_plot)
    )
  )
  cat(' \n \n')
}
```
:::



## leaflet    

::: {.panel-tabset}
```{r leaflet}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  
  mymap <-  leaflet() %>%
    addTiles()   %>% 
    setView(-93.65, 42.0285, zoom = 17)  %>%
    addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
  
  
  cat(  glue::glue("### leaflet {i}   \n\n"))
  cat("\n \n")
  
  print(tagList(mymap))
  
  cat(' \n \n')
}
```
:::

## mapview     

mapview needs to be wrapped inside print(tagList()) AND be initialized by running plot_ly() before hand, similar to datatable.
You also need to extract the @map from the mapview object before printing it.

```{r mapviewinit, include = FALSE}
mapview()
```


::: {.panel-tabset}
```{r mapview}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  mymap <- mapview(breweries, zcol="number.of.types")
  cat(  glue::glue("### mapview {i}   \n\n"))
  cat("\n \n")
  
  print(tagList(mymap@map))
  
  cat(' \n \n')
}
```
:::


## all in one   

you cal absolutely put everything together   ..



::: {.panel-tabset}
```{r allinone}
#| results: asis
for(i  in as.character(levels(penguins$island))) {
  mymap <- mapview(breweries, zcol="number.of.types")
  cat(  glue::glue("### all in one {i}   \n\n"))
  cat("\n \n")
  
  print(
    penguins %>%
      filter(island == i) %>%
      head(5) %>%
      knitr::kable()
  )
  print(
    tagList(
      penguins %>%
        filter(island == i) %>%
        head(5) %>%
        gt::gt()
    )
  )
  print(
    penguins %>%
      filter(island == i) %>%
      ggplot(aes(x=bill_length_mm,  y= bill_depth_mm, color = species)) +
      geom_point() + 
      labs(title = i)
  )
    my_plot <- penguins %>%
    filter(island == i) %>%
    ggplot(aes(x=bill_length_mm,  y= bill_depth_mm, color = species)) +
    geom_point() + 
    labs(title = i)
  print(
    tagList(
      ggplotly(my_plot)
    )
  )
  cat(' \n \n')
}
```
:::


